#include "AoCHelper.h"
#include "solutions.h"
#include "gtest/gtest.h"

class Solutions : public ::testing::Test {
protected:
  std::vector<std::string> exampleInputPartOne{
      "467..114..", "...*......", "..35..633.", "......#...", "617*......",
      ".....+.58.", "..592.....", "......755.", "...$.*....", ".664.598.."};
  std::vector<std::string> exampleInputPartTwo{};

  std::function<std::vector<std::string>()> realInput = []() {
    AoCHelper aocHelper{"2023", "3"};
    return aocHelper.get_input();
  };
};

TEST_F(Solutions, PartOneExampleData) {
  int answer{PartOne(exampleInputPartOne)};
  EXPECT_EQ(answer, 4361);
}
TEST_F(Solutions, PartOneExtraData) {
  std::vector<std::vector<std::string>> inputsAdjacent = {
      {"...........", "..*........", "..100......", "..........."},

      {"...........", "...*.......", "..100......", "..........."},

      {"...........", ".....*.....", "..100......", "..........."},

      {"...........", "...........", "..100*.....", "..........."},

      {"...........", "...........", "..100......", ".....*....."},

      {"...........", "...........", "..100......", "....*......"},

      {"...........", "...........", "..100......", "...*......."},

      {"...........", "...........", "..100......", "..*........"},

      {"...........", "...........", "..100......", ".*........."},

      {"...........", "...........", ".*100......", "..........."},

      {"...........", ".*.........", "..100......", "..........."},
      {"...........", ".....*.....", "....100....", "....100....",
       "..........."},
      {"...........", "....100....", "....100....", "....100...*",
       "........100"},
      {"...........", "....100....", "....100....", "....100...*",
       ".......100."},
      {"...........", "....100....", "....100....", "........100",
       "..........*"},
      {"...........", "....100....", "....100....", "100........",
       "*.........."},
      {"..........*", ".......100.", "....100....", "100........",
       "..........."},

  };

  for (const auto& input : inputsAdjacent) {
    EXPECT_EQ(PartOne(input), 100);
  }

  std::vector<std::vector<std::string>> inputsNonAdjacent = {
      {"..*******..", "..*.....*..", "..*.100.*..", "..*.....*..",
       "..*******."},
      {"...", "1.*", "..."}};

  for (const auto& input : inputsNonAdjacent) {
    EXPECT_EQ(PartOne(input), 0);
  }
}
TEST_F(Solutions, TestStarAnd100Positions) {
  std::vector<std::pair<std::vector<std::string>, int>> testCases = {
      {{"...........", "..*........", "..100......", "..........."}, 100},
      {{"...........", "...*.......", "..100......", "..........."}, 100},
      {{"...........", ".....*.....", "..100......", "..........."}, 100},
      {{"...........", "...........", "..100*.....", "..........."}, 100},
      {{"...........", "...........", "..100......", ".....*....."}, 100},
      {{"...........", "...........", "..100......", "....*......"}, 100},
      {{"...........", "...........", "..100......", "...*......."}, 100},
      {{"...........", "...........", "..100......", "..*........"}, 100},
      {{"...........", "...........", "..100......", ".*........."}, 100},
      {{"...........", "...........", ".*100......", "..........."}, 100},
      {{"...........", ".*.........", "..100......", "..........."}, 100},
      {{"*..........", "100........", "...........", "..........."}, 100},
      {{"*..........", "...........", "100........", "..........."}, 0},
      {{"*..........", "...........", "........100", "..........."}, 0},
      {{"100........", "*..........", "...........", "..........."}, 100},
      {{"100........", "...........", "*..........", "..........."}, 0},
      {{"*00........", "1..........", "...........", "..........."}, 1},
      {{"100........", "*..........", "...........", "..........."}, 100},
      {{"........100", "....100....", "100........", "*.........."}, 100}};
  for (const auto& testCase : testCases) {
    EXPECT_EQ(PartOne(testCase.first), testCase.second);
  }
}

TEST_F(Solutions, PartOneRealData) {
  int answer{PartOne(realInput())};
  EXPECT_EQ(answer, 519444);
}

TEST_F(Solutions, PartTwoExampleData) {
  int answer{PartTwo(exampleInputPartOne)};
  EXPECT_EQ(answer, 467835);
}

TEST_F(Solutions, PartTwoExtraData) {
  std::vector<std::pair<std::vector<std::string>, int>> testCases = {
      {{"...........", "...........", "...........", ".....*.....",
        "..200.500..", "..........."},
       100000},
      {{"...........", "...........", ".........20", "..........*",
        ".......100.", "..........."},
       2000},
      {{"...........", "...........", ".........20", ".......100*",
        ".......100.", "..........."},
       0}};
  for (const auto& testCase : testCases) {
    EXPECT_EQ(PartTwo(testCase.first), testCase.second);
  }
}

TEST_F(Solutions, PartTwoRealData) {
  int answer{PartTwo(realInput())};
  EXPECT_EQ(answer, 74528807);
}

int main(int argc, char** argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
